import { collect, format, write } from "@litdoc/manifest";
import { stringify, tagged } from "@litdoc/templates";
import { WalkOptions } from "https://deno.land/std@0.178.0/fs/walk.ts";

/** HELPERS **/

type Value = (routes: Record<string, unknown>) => string[];

const template = tagged<Value>`
// DO NOT EDIT. This file is generated by litdoc.
// This file SHOULD be checked into source version control.
// This file is automatically updated during development when running \`dev.ts\`.

${((routes) =>
  Object.keys(routes)
    .map((file, i) => `import * as ${"$" + i} from "./${file}";`))}

export default {
  baseUrl: import.meta.url,
  routes: {
    ${(routes) =>
  Object.keys(routes)
    .map((file, i) => `"./${file}": ${"$" + i},`)}
  },
};
`;

/** MAIN **/

export default async function dev(metaUrl: string, options: {
  routes: WalkOptions;
}) {
  const baseUrl = new URL("./", metaUrl);

  const { routes } = await collect(baseUrl, {
    routes: {
      includeFiles: true,
      ...options.routes,
    },
  });

  const raw = stringify(
    template,
    (value) => value(routes).join(""),
  );

  const formatted = await format(raw);
  await write("litdoc.gen.ts", formatted);

  console.log(
    `%cThe manifest has been generated for ` +
      `${Object.keys(routes).length} routes.`,
    "color: green; font-weight: bold",
  );
}
