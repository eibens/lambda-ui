"use strict";

const path = require("path");
const os = require("os");
const fs = require("fs");
const { Storage } = require("@google-cloud/storage");
const functions = require("@google-cloud/functions-framework");
const Busboy = require("busboy");

const storage = new Storage();

functions.http("upload", (req, res) => {
  // Set CORS headers for preflight requests
  // Allows GETs from any origin with the Content-Type header
  // and caches preflight response for 3600s
  res.set("Access-Control-Allow-Origin", "*");
  if (req.method === "OPTIONS") {
    // Send response to OPTIONS requests
    res.set("Access-Control-Allow-Methods", "GET");
    res.set("Access-Control-Allow-Headers", "Content-Type");
    res.set("Access-Control-Max-Age", "3600");
    res.status(204).send("");
    return;
  }

  if (req.method !== "POST") {
    return res.status(405).end();
  }

  const busboy = Busboy({ headers: req.headers });
  const tmpdir = os.tmpdir();
  const fields = {};
  const uploads = {};

  busboy.on("field", (fieldname, val) => {
    fields[fieldname] = val;
  });

  const fileWrites = [];

  busboy.on("file", (fieldname, file, { filename }) => {
    const filepath = path.join(tmpdir, filename);
    uploads[fieldname] = filepath;

    const writeStream = fs.createWriteStream(filepath);
    file.pipe(writeStream);

    const promise = new Promise((resolve, reject) => {
      file.on("end", () => {
        writeStream.end();
      });
      writeStream.on("close", resolve);
      writeStream.on("error", reject);
    });
    fileWrites.push(promise);
  });

  busboy.on("finish", async () => {
    await Promise.all(fileWrites);

    await Promise.all(
      Object.values(uploads).map(async (filepath) => {
        const bucket = storage.bucket("experimental-storage");
        await bucket.upload(filepath);
        fs.unlinkSync(filepath);
      }),
    );

    res.send();
  });

  busboy.end(req.rawBody);
});
