import { toEntries } from "@/features/manifest/collect.ts";
import * as Manifest from "./mod.ts";

/** HELPERS **/

type Sync<T> = T extends Promise<infer R> ? R : never;
type Props = Sync<ReturnType<typeof collect>>;

async function collect(baseUrl: URL) {
  const patterns = {
    index: /\/features\/.*\/index\.tsx$/,
  };

  return await Manifest.collect(baseUrl, {
    routes: {
      includeFiles: true,
      match: [
        patterns.index,
      ],
    },
  });
}

const template = Manifest.tag<Props>`
// DO NOT EDIT. This file is generated by litdoc.
// This file SHOULD be checked into source version control.
${((props) =>
  toEntries(props.routes)
    .map((file) => `import * as ${file.varName} from "./${file.path}";`))}

export default {
  baseUrl: import.meta.url,
  routes: {
    ${(props) =>
  toEntries(props.routes)
    .map((file) => `"./${file.path}": ${file.varName},`)}
  },
};
`;

/** MAIN **/

export async function dev(metaUrl: string, entryPoint: string) {
  const baseUrl = new URL("./", metaUrl);
  const mainUrl = new URL(entryPoint, baseUrl);

  const props = await collect(baseUrl);
  const raw = Manifest.stringify(template, props);

  const formatted = await Manifest.format(raw);
  await Manifest.write("fresh.gen.ts", formatted);

  console.log(
    `%cThe manifest has been generated for ` +
      `${props.routes.ids.length} routes.`,
    "color: orange; font-weight: bold",
  );

  await import(mainUrl.href);
}
