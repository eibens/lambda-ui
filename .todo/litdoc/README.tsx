type TemplateArgs = [TemplateStringsArray, ...unknown[]];

const doc: {
  children: {
    lang: string;
    args: TemplateArgs;
  }[];
} = {
  children: [],
};

function md(...args: TemplateArgs) {
  const lang = "md";
  doc.children.push({ lang, args });
  return args;
}

/** MAIN **/

export default doc;

md`
# litdoc

Litdoc is a document generator.

## Introduction

These are the main challenges faced in the building of this project:

[C-TS]
: Writing statically typed documentation for TypeScript projects.
: Generation of TypeScript manifest files that export the documentation.

[C-EVAL]
: Representing dynamic documents that are generated by running code. 
: Requires a way to mix runtime code evaluation with static source code.

[C-TRANS]
: Converting between different representations of a document.

[C-EXT] 
: Integrating with existing tools and libraries. 
  For example, providing Fresh integration.

[C-LIB] 
: Packaging parts of the source code as a reusable TypeScript library.
: Requires special care for interfaces and documentation.

[C-LANG]
: Supporting multiple languages, such as Markdown, TypeScript, and HTML.
: Requires a nested document structure with a language tags.
: Inclusion of 3rd party language implementations.


# [C-LIB]

This is necessary to make the project usable in other TypeScript projects, without the need for a CLI or other external tools.

- TypeScript Templates
  - This is a way to 

- Basic theme
  - This ia an example of how litdoc can be used to document a TypeScript project. 

- Providing an API for writing strongly typed TypeScript documentation. 
    It is lightweight to be easily integrated into existing projects. 
    The API should be close to the syntax level 
      and work optionally without imports with minimal boilerplate.

A document 
  is an instance of a language, 
    such as Markdown, TypeScript, HTML.

Source code 
  is one representation of a document, 
  but there are many others. 
For example, a document
  can be represented as 
    an abstract syntax tree (AST), 
    or an audio file 
      that reads the document aloud, 
      with pauses, intonation, and music 
        to communicate its content.



---

### OLD/TODO

What are representations of a document?

A document can be represented by source code. 
The raw Markdown source code 
  represents the document as raw text,
  with \`*asterisk surrounded words*\` for emphasis, 
  or \`#\` as a prefix for a heading.

A parser for A Markdown 
  can convert this text into an abstract syntax tree
(AST). This is a tree structure, where each node represents a part of the
document. For example, a heading is represented by a node with a type name of
\`heading\`, and a descendent text node with the heading text as its value.

Finally, a renderer can convert the AST into HTML. Here, an \`emphasis\` node is
represented as an \`<em>\` element, and a \`heading\` node as an \`<h1>\` element. For
example,

It provides specifications and implementations, but as a framework it also
provides a way to extend the functionality of the library with external
specifications.
`;
